import{_ as i,c as s,o as e,af as l}from"./chunks/framework.Cm3tdt7z.js";const c=JSON.parse('{"title":"工作燃料商户对接接口文档","description":"","frontmatter":{},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),t={name:"api/index.md"};function n(h,a,r,p,d,o){return e(),s("div",null,[...a[0]||(a[0]=[l(`<h1 id="工作燃料商户对接接口文档" tabindex="-1">工作燃料商户对接接口文档 <a class="header-anchor" href="#工作燃料商户对接接口文档" aria-label="Permalink to “工作燃料商户对接接口文档”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>本文档描述了第三方系统如何与&quot;工作燃料&quot;系统进行对接，包括身份认证、发起消费请求以及接收支付回调通知等流程。</p><p>工作燃料是一个企业员工福利管理系统，本系统提供了一套完整的API接口，方便第三方商户系统与工作燃料平台进行对接。</p><h2 id="接口规范" tabindex="-1">接口规范 <a class="header-anchor" href="#接口规范" aria-label="Permalink to “接口规范”">​</a></h2><p>所有接口都遵循以下规范：</p><ul><li>接口地址：<code>https://your-domain.com</code></li><li>请求方式：HTTP/HTTPS</li><li>数据格式：JSON</li><li>字符编码：UTF-8</li><li>时间格式：ISO8601标准格式（例如：2023-04-05T12:00:00）</li></ul><h2 id="认证机制" tabindex="-1">认证机制 <a class="header-anchor" href="#认证机制" aria-label="Permalink to “认证机制”">​</a></h2><p>接口访问需要通过JWT Token进行认证，获取Token的方法请参考<a href="./authentication.html">身份认证</a>章节。</p><p>在请求需要认证的接口时，请在HTTP请求头中添加：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Authorization: Bearer {token}</span></span></code></pre></div><h2 id="响应格式" tabindex="-1">响应格式 <a class="header-anchor" href="#响应格式" aria-label="Permalink to “响应格式”">​</a></h2><p>所有接口的响应格式都遵循统一的结构，基于R.kt模型：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中：</p><ul><li><code>c</code>: 状态码，0表示成功，其他值表示失败</li><li><code>m</code>: 状态消息，对状态码的文字说明</li><li><code>d</code>: 实际数据内容</li></ul><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to “错误处理”">​</a></h2><p>当接口调用失败时，会返回相应的错误码和错误信息，请参考<a href="./error-codes.html">错误码说明</a>章节进行处理。</p>`,18)])])}const g=i(t,[["render",n]]);export{c as __pageData,g as default};
